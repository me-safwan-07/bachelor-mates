// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum IdentityProvider {
  email
  google
}

enum Role {
  ADMIN
  USER
}

model User {
  id                        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  name                      String
  email                     String           @unique
  emailVerified             DateTime?        @map(name: "email_verified")
  imageUrl                  String?
  password                  String?
  identityProvider          IdentityProvider @default(email)
  identityProviderAccountId String?
  accounts                  Account[]
  notes                     Notes[]          @relation("UserNotes")
  role                      Role?            @default(USER) 

  // @@index([email])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.String
  refresh_token     String?  @db.String
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum AccessType {
  FREE
  PAID
}

enum Degree {
  BCOM
  BBA
  BCA
}

model Notes {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @updatedAt @map(name: "updated_at")
  uploader    User        @relation("UserNotes", fields: [uploaderId], references: [id])
  uploaderId  String      @db.ObjectId
  name        String      
  accessType  AccessType 
  // year        Int add in question paper year means year of question paper or year of notes         
  degree      Degree     
  stream      String?      
  semester    Int         
  images      Images[]
  price       Float?      @default(0.0)      
}

model Images {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  notes     Notes   @relation(fields: [notesId], references: [id], onDelete: Cascade)
  notesId   String  @db.ObjectId
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([notesId])
}

model Upload {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  publicId String
  createdAt DateTime @default(now())
} 